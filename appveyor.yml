version: '{build}'
skip_tags: false
shallow_clone: true
environment:
  matrix:
#  - PlatformToolset: msys2-static
#    QTPATH: C:\msys64\mingw64\qt5-static
#    GENERATOR: MinGW Makefiles
#    BITS: 64
#    ARCH: x86_64
#    EXTRA_CMAKE_ARGS: -DUSE_STATIC_QT=1
  # - PlatformToolset: mingw-w64
  #   QTPATH: C:\Qt\5.12.6\mingw73_64
  #   GENERATOR: MinGW Makefiles
  #   BOOST_ROOT: C:\msys64\mingw64
  #   BOOST_LIBRARY_DIR: C:\msys64\mingw64\lib
  #   BOOST_INCLUDE_DIR: C:\msys64\mingw64\include\boost
  #   RELEASE_ARTIFACT: true
  - PlatformToolset: v140
    QTPATH: C:\Qt\5.11\msvc2015
    GENERATOR: Visual Studio 14
    ARCHI: x64
    BOOST_ROOT: C:\Libraries\boost_1_69_0
    Boost_LIBRARIES: C:\Libraries\boost_1_69_0\lib64-msvc-14.0
    Boost_INCLUDE_DIRS: C:\Libraries\boost_1_69_0\boost
configuration:
- RelWithDebInfo
matrix:
  fast_finish: false
install:
# sh.exe must not be in the PATH
- if "%PlatformToolset%"=="mingw-w64" set PATH=C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0\mingw64\bin;%PATH:C:\Program Files\Git\usr\bin;=%
- if "%PlatformToolset%"=="v140" call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %archi%
# Static qt5 builds using msys2/mingw packages
- if "%PlatformToolset%"=="msys2-static" set PATH=C:\msys64\mingw%BITS%\bin;%PATH:C:\Program Files\Git\usr\bin;=%
- if "%PlatformToolset%"=="msys2-static" C:\msys64\usr\bin\pacman -S --needed --noconfirm mingw-w64-%ARCH%-gcc mingw-w64-%ARCH%-cmake mingw-w64-%ARCH%-python2 mingw-w64-%ARCH%-qt5-static mingw-w64-%ARCH%-jasper
- if "%PlatformToolset%"=="mingw-w64" C:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-boost
build_script:
- cd "%BOOST_ROOT%"
- dir
- cd "%Boost_LIBRARIES%"
- dir
- cd "%BOOST_ROOT%\libs"
- dir
- cd "%APPVEYOR_BUILD_FOLDER%"
- set PATH=%BOOST_ROOT%;%Boost_LIBRARIES%;%QTPATH%;%QTPATH%/bin;%PATH%
- echo %PATH%
- mkdir build
- cd build
- cmake -G "%GENERATOR%" -DBOOST_ROOT="%BOOST_ROOT%" -DBOOST_INCLUDE_DIR="%BOOST_INCLUDE_DIR%" -DBoost_LIBRARIES="%Boost_LIBRARIES%" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../INSTALL %EXTRA_CMAKE_ARGS% ..
- cmake --build . --config Release --target install
- windeployqt ./INSTALL/bin/tree --no-plugins --no-translations
test_script:
- set PATH=%BOOST_ROOT%;%QTPATH%;%QTPATH%/bin;%PATH%
- echo %PATH%
- cd "%APPVEYOR_BUILD_FOLDER%"/build
- ctest -VV -C Release
- ps: (Get-Item "$($env:APPVEYOR_BUILD_FOLDER)\INSTALL\bin\tree-nvim.exe").VersionInfo
artifacts:
- path: INSTALL
  name: tree-release-windows
deploy:
  - provider: GitHub
    description: Automated builds (Appveyor)
    # release: $(appveyor_repo_tag_name)
    auth_token: $(GITHUB_OAUTH_TOKEN)
    # auth_token:
    #   secure: Hx2tU6GZPZNB6qGjHcIqa1tEm8fVGXZUVfXyjboVrPcmA9OWMTXhLxayDzMMl3kD
    artifact: tree-release-windows.zip
    prerelease: false
    force_update: true
    on:
      APPVEYOR_REPO_TAG: true  # deploy on tag push only
      configuration: RelWithDebInfo
      release_artifact: true
  - provider: GitHub
    description: Automated builds (Appveyor)
    release: nightly
    auth_token: $(GITHUB_OAUTH_TOKEN)
    artifact: tree-release-windows.zip
    prerelease: false
    force_update: true
    on:
      configuration: RelWithDebInfo
      release_artifact: true
